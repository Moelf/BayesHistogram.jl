using BayesHistogram, Test, Random, StableRNGs

@testset "basic test BayesHistogram" begin
    x = randn(StableRNG(1337), 5000)

    ref = [
           -3.1578070050937224,
           -2.627589003399208,
           -2.1567159913141696,
           -1.809553033077446,
           -1.4561209721822812,
           -0.9972606510660637,
           -0.5753838312589055,
           0.8030403893027767,
           1.1970293913971268,
           1.6398624165469307,
           2.104886260600142,
           2.498821309397118,
           2.92140180959945,
           3.8845391427592286,
          ]
    @test all(bayesian_blocks(x, resolution = 100.0, min_counts = 2).edges .≈ ref)

    ref = [
           -3.1578070050937224,
           -2.4424726736043123,
           -1.719768706521348,
           -0.9972606510660637,
           0.9593283778530831,
           1.6649014185653361,
           2.498821309397118,
           3.8845391427592286,
          ]
    @test all(bayesian_blocks(x, resolution = 10.0, min_counts = 2).edges .≈ ref)

    ref = [
           -3.1578070050937224,
           -2.4004600598649937,
           -1.8298532494637834,
           -1.3500184449043653,
           -0.8774030758210719,
           -0.23294418890701424,
           0.3779185031870537,
           0.9593283778530831,
           1.4851079736094,
           1.965053158543435,
           2.4534081553862954,
           3.8845391427592286,
    ]
    @test all(bayesian_blocks(x, resolution = 15.0).edges .≈ ref)


    w = rand(StableRNG(1337), 5000) .* 10 .+ 10
    ref = [
           -3.1578070050937224,
           -1.5449036608365123,
           1.0655876974876393,
           2.474272965955527,
           3.8845391427592286,
          ]
    @test all(bayesian_blocks(x, weights = w, resolution = 5.0).edges .≈ ref)
    
    ref = [-3.704058531618975, -2.778065586707626, -2.4631424510792215, -2.314878357736271, -2.1402068536709837, -1.9939563535400828, -1.8463434351082413, -1.6280845752313406, -1.4638697740329483, -1.3140645798864168, -1.089256530522866, -0.8575881683262867, -0.644610676860989, -0.49529999221146453, -0.3473371123214944, -0.06647876496714035, 0.09072830817794457, 0.29740423003699257, 0.463534347245104, 0.6864434760871314, 0.9542073946864447, 1.2602857648643435, 1.4805063922752275, 1.6456367564614374, 1.8727595838347098, 2.023652674002043, 2.289175115404521, 2.4649006788639394, 2.8689255970065712, 3.590507153644763]
    
    @test all(bayesian_blocks(x, weights = w, resolution = 50.0).edges .≈ ref)
end



@testset "Jeffrey's Prior" begin
    max_N = 100
    Nv = 1:max_N
    prior = @. 1/sqrt(Nv)
    prior .= log.(prior./sum(prior))
    a_prior = Jeffrey(1.0)
    deltas = abs.(prior .- a_prior.(Nv, max_N))
    @test all(deltas .<= 1e-10)
end


@testset "Robustness" begin
    tries = 100
    fails = 0
    okays = 0
    for i in 1:tries
        x = randn(Xoshiro(1337 + 137*i), 500)
        try
            bl = bayesian_blocks(x)
            okays += 1
        catch all
            fails += 1
        end
    end
    @test fails == 0
    @test okays == tries
end